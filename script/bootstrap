#!/usr/bin/env bash
set -eux

# Uncomment this next line (and commit the change) to make dotfile installs into
# any new codespaces a no-op. Useful for debugging devcontainer builds without
# worrying about whether your dotfiles are causing issues.
# [ -n "${CODESPACES:-}" ] && exit 0

cd "$(dirname "$0")/.."

echo "Starting bootstrap..."

export ZSH="${ZSH:-${HOME}/.oh-my-zsh}"
export ZSH_CUSTOM="${ZSH_CUSTOM:-${ZSH}/custom}"
export ZSH_PATH="${ZSH_PATH:-$(command -v zsh 2>/dev/null)}"

if [ -n "${ZSH_PATH}" ]; then
  # Check for Oh My Zsh and install if we don't have it
  if [ ! -d "${ZSH}" ]; then
    echo "Installing Oh My Zsh..."
    /usr/bin/env bash -c "$(wget -qO- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  fi

  mkdir -p "${ZSH_CUSTOM}"

  # Set zsh as the default
  echo "Setting ZSH as the default shell..."
  sudo chsh -s $(command -v zsh)
fi

if [ -n "${CODESPACES:-}" ]; then
  export DOTFILES="/workspaces/.codespaces/.persistedshare/dotfiles"
else
  export DOTFILES="${DOTFILES:-$(pwd)}"
fi

# Symlink config files applicable to local and remote development
script/symlink-common-files

[ -n "${CODESPACES:-}" ] && script/codespaces-bootstrap

if [ -n "${ZSH_PATH}" ] && [ -d "${ZSH_CUSTOM}" ]; then
  echo "Installing omz plugins..."
  [ -d "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting" ] || git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting"
  [ -d "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" ] || git clone https://github.com/zsh-users/zsh-autosuggestions.git "${ZSH_CUSTOM}/plugins/zsh-autosuggestions"
  [ -d "${ZSH_CUSTOM}/plugins/zsh-completions" ] || git clone https://github.com/zsh-users/zsh-completions.git "${ZSH_CUSTOM}/plugins/zsh-completions"
  [ -d "${ZSH_CUSTOM}/plugins/zsh-history-substring-search" ] || git clone https://github.com/zsh-users/zsh-history-substring-search "${ZSH_CUSTOM}/plugins/zsh-history-substring-search"
fi

echo "Done bootstrapping!"
